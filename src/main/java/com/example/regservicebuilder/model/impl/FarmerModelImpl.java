package com.example.regservicebuilder.model.impl;

import com.example.regservicebuilder.model.Farmer;
import com.example.regservicebuilder.model.FarmerModel;
import com.example.regservicebuilder.model.FarmerSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Farmer service. Represents a row in the &quot;Regs_Farmer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.example.regservicebuilder.model.FarmerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FarmerImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FarmerImpl
 * @see com.example.regservicebuilder.model.Farmer
 * @see com.example.regservicebuilder.model.FarmerModel
 * @generated
 */
@JSON(strict = true)
public class FarmerModelImpl extends BaseModelImpl<Farmer>
    implements FarmerModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a farmer model instance should use the {@link com.example.regservicebuilder.model.Farmer} interface instead.
     */
    public static final String TABLE_NAME = "Regs_Farmer";
    public static final Object[][] TABLE_COLUMNS = {
            { "farmerId", Types.BIGINT },
            { "organizationName", Types.VARCHAR },
            { "legalForm", Types.VARCHAR },
            { "inn", Types.VARCHAR },
            { "kpp", Types.VARCHAR },
            { "ogrn", Types.VARCHAR },
            { "districtId", Types.BIGINT },
            { "registrationDate", Types.TIMESTAMP },
            { "archived", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table Regs_Farmer (farmerId LONG not null primary key,organizationName VARCHAR(75) null,legalForm VARCHAR(75) null,inn VARCHAR(75) null,kpp VARCHAR(75) null,ogrn VARCHAR(75) null,districtId LONG,registrationDate DATE null,archived VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table Regs_Farmer";
    public static final String ORDER_BY_JPQL = " ORDER BY farmer.farmerId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Regs_Farmer.farmerId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.example.regservicebuilder.model.Farmer"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.example.regservicebuilder.model.Farmer"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final String MAPPING_TABLE_REGS_REGS_FARMER_DISTRICTS_NAME = "Regs_Regs_Farmer_Districts";
    public static final Object[][] MAPPING_TABLE_REGS_REGS_FARMER_DISTRICTS_COLUMNS =
        {
            { "districtId", Types.BIGINT },
            { "farmerId", Types.BIGINT }
        };
    public static final String MAPPING_TABLE_REGS_REGS_FARMER_DISTRICTS_SQL_CREATE =
        "create table Regs_Regs_Farmer_Districts (districtId LONG not null,farmerId LONG not null,primary key (districtId, farmerId))";
    public static final boolean FINDER_CACHE_ENABLED_REGS_REGS_FARMER_DISTRICTS = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.Regs_Regs_Farmer_Districts"),
            true);
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.example.regservicebuilder.model.Farmer"));
    private static ClassLoader _classLoader = Farmer.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Farmer.class };
    private long _farmerId;
    private String _organizationName;
    private String _legalForm;
    private String _inn;
    private String _kpp;
    private String _ogrn;
    private long _districtId;
    private Date _registrationDate;
    private String _archived;
    private Farmer _escapedModel;

    public FarmerModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Farmer toModel(FarmerSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Farmer model = new FarmerImpl();

        model.setFarmerId(soapModel.getFarmerId());
        model.setOrganizationName(soapModel.getOrganizationName());
        model.setLegalForm(soapModel.getLegalForm());
        model.setInn(soapModel.getInn());
        model.setKpp(soapModel.getKpp());
        model.setOgrn(soapModel.getOgrn());
        model.setDistrictId(soapModel.getDistrictId());
        model.setRegistrationDate(soapModel.getRegistrationDate());
        model.setArchived(soapModel.getArchived());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Farmer> toModels(FarmerSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Farmer> models = new ArrayList<Farmer>(soapModels.length);

        for (FarmerSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _farmerId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setFarmerId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _farmerId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Farmer.class;
    }

    @Override
    public String getModelClassName() {
        return Farmer.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("farmerId", getFarmerId());
        attributes.put("organizationName", getOrganizationName());
        attributes.put("legalForm", getLegalForm());
        attributes.put("inn", getInn());
        attributes.put("kpp", getKpp());
        attributes.put("ogrn", getOgrn());
        attributes.put("districtId", getDistrictId());
        attributes.put("registrationDate", getRegistrationDate());
        attributes.put("archived", getArchived());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long farmerId = (Long) attributes.get("farmerId");

        if (farmerId != null) {
            setFarmerId(farmerId);
        }

        String organizationName = (String) attributes.get("organizationName");

        if (organizationName != null) {
            setOrganizationName(organizationName);
        }

        String legalForm = (String) attributes.get("legalForm");

        if (legalForm != null) {
            setLegalForm(legalForm);
        }

        String inn = (String) attributes.get("inn");

        if (inn != null) {
            setInn(inn);
        }

        String kpp = (String) attributes.get("kpp");

        if (kpp != null) {
            setKpp(kpp);
        }

        String ogrn = (String) attributes.get("ogrn");

        if (ogrn != null) {
            setOgrn(ogrn);
        }

        Long districtId = (Long) attributes.get("districtId");

        if (districtId != null) {
            setDistrictId(districtId);
        }

        Date registrationDate = (Date) attributes.get("registrationDate");

        if (registrationDate != null) {
            setRegistrationDate(registrationDate);
        }

        String archived = (String) attributes.get("archived");

        if (archived != null) {
            setArchived(archived);
        }
    }

    @JSON
    @Override
    public long getFarmerId() {
        return _farmerId;
    }

    @Override
    public void setFarmerId(long farmerId) {
        _farmerId = farmerId;
    }

    @JSON
    @Override
    public String getOrganizationName() {
        if (_organizationName == null) {
            return StringPool.BLANK;
        } else {
            return _organizationName;
        }
    }

    @Override
    public void setOrganizationName(String organizationName) {
        _organizationName = organizationName;
    }

    @JSON
    @Override
    public String getLegalForm() {
        if (_legalForm == null) {
            return StringPool.BLANK;
        } else {
            return _legalForm;
        }
    }

    @Override
    public void setLegalForm(String legalForm) {
        _legalForm = legalForm;
    }

    @JSON
    @Override
    public String getInn() {
        if (_inn == null) {
            return StringPool.BLANK;
        } else {
            return _inn;
        }
    }

    @Override
    public void setInn(String inn) {
        _inn = inn;
    }

    @JSON
    @Override
    public String getKpp() {
        if (_kpp == null) {
            return StringPool.BLANK;
        } else {
            return _kpp;
        }
    }

    @Override
    public void setKpp(String kpp) {
        _kpp = kpp;
    }

    @JSON
    @Override
    public String getOgrn() {
        if (_ogrn == null) {
            return StringPool.BLANK;
        } else {
            return _ogrn;
        }
    }

    @Override
    public void setOgrn(String ogrn) {
        _ogrn = ogrn;
    }

    @JSON
    @Override
    public long getDistrictId() {
        return _districtId;
    }

    @Override
    public void setDistrictId(long districtId) {
        _districtId = districtId;
    }

    @JSON
    @Override
    public Date getRegistrationDate() {
        return _registrationDate;
    }

    @Override
    public void setRegistrationDate(Date registrationDate) {
        _registrationDate = registrationDate;
    }

    @JSON
    @Override
    public String getArchived() {
        if (_archived == null) {
            return StringPool.BLANK;
        } else {
            return _archived;
        }
    }

    @Override
    public void setArchived(String archived) {
        _archived = archived;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Farmer.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Farmer toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Farmer) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        FarmerImpl farmerImpl = new FarmerImpl();

        farmerImpl.setFarmerId(getFarmerId());
        farmerImpl.setOrganizationName(getOrganizationName());
        farmerImpl.setLegalForm(getLegalForm());
        farmerImpl.setInn(getInn());
        farmerImpl.setKpp(getKpp());
        farmerImpl.setOgrn(getOgrn());
        farmerImpl.setDistrictId(getDistrictId());
        farmerImpl.setRegistrationDate(getRegistrationDate());
        farmerImpl.setArchived(getArchived());

        farmerImpl.resetOriginalValues();

        return farmerImpl;
    }

    @Override
    public int compareTo(Farmer farmer) {
        long primaryKey = farmer.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Farmer)) {
            return false;
        }

        Farmer farmer = (Farmer) obj;

        long primaryKey = farmer.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<Farmer> toCacheModel() {
        FarmerCacheModel farmerCacheModel = new FarmerCacheModel();

        farmerCacheModel.farmerId = getFarmerId();

        farmerCacheModel.organizationName = getOrganizationName();

        String organizationName = farmerCacheModel.organizationName;

        if ((organizationName != null) && (organizationName.length() == 0)) {
            farmerCacheModel.organizationName = null;
        }

        farmerCacheModel.legalForm = getLegalForm();

        String legalForm = farmerCacheModel.legalForm;

        if ((legalForm != null) && (legalForm.length() == 0)) {
            farmerCacheModel.legalForm = null;
        }

        farmerCacheModel.inn = getInn();

        String inn = farmerCacheModel.inn;

        if ((inn != null) && (inn.length() == 0)) {
            farmerCacheModel.inn = null;
        }

        farmerCacheModel.kpp = getKpp();

        String kpp = farmerCacheModel.kpp;

        if ((kpp != null) && (kpp.length() == 0)) {
            farmerCacheModel.kpp = null;
        }

        farmerCacheModel.ogrn = getOgrn();

        String ogrn = farmerCacheModel.ogrn;

        if ((ogrn != null) && (ogrn.length() == 0)) {
            farmerCacheModel.ogrn = null;
        }

        farmerCacheModel.districtId = getDistrictId();

        Date registrationDate = getRegistrationDate();

        if (registrationDate != null) {
            farmerCacheModel.registrationDate = registrationDate.getTime();
        } else {
            farmerCacheModel.registrationDate = Long.MIN_VALUE;
        }

        farmerCacheModel.archived = getArchived();

        String archived = farmerCacheModel.archived;

        if ((archived != null) && (archived.length() == 0)) {
            farmerCacheModel.archived = null;
        }

        return farmerCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(19);

        sb.append("{farmerId=");
        sb.append(getFarmerId());
        sb.append(", organizationName=");
        sb.append(getOrganizationName());
        sb.append(", legalForm=");
        sb.append(getLegalForm());
        sb.append(", inn=");
        sb.append(getInn());
        sb.append(", kpp=");
        sb.append(getKpp());
        sb.append(", ogrn=");
        sb.append(getOgrn());
        sb.append(", districtId=");
        sb.append(getDistrictId());
        sb.append(", registrationDate=");
        sb.append(getRegistrationDate());
        sb.append(", archived=");
        sb.append(getArchived());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(31);

        sb.append("<model><model-name>");
        sb.append("com.example.regservicebuilder.model.Farmer");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>farmerId</column-name><column-value><![CDATA[");
        sb.append(getFarmerId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>organizationName</column-name><column-value><![CDATA[");
        sb.append(getOrganizationName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>legalForm</column-name><column-value><![CDATA[");
        sb.append(getLegalForm());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>inn</column-name><column-value><![CDATA[");
        sb.append(getInn());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>kpp</column-name><column-value><![CDATA[");
        sb.append(getKpp());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ogrn</column-name><column-value><![CDATA[");
        sb.append(getOgrn());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>districtId</column-name><column-value><![CDATA[");
        sb.append(getDistrictId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>registrationDate</column-name><column-value><![CDATA[");
        sb.append(getRegistrationDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>archived</column-name><column-value><![CDATA[");
        sb.append(getArchived());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
